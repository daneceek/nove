[
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "Vector",
        "importPath": "vector",
        "description": "vector",
        "isExtraImport": true,
        "detail": "vector",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "vectors",
        "kind": 2,
        "importPath": "test_vector",
        "description": "test_vector",
        "peekOfCode": "def vectors():\n    v1 = Vector(1, 2)\n    v2 = Vector(3, 4)\n    return v1, v2\ndef test_addition(vectors):\n    v1, v2 = vectors\n    result = v1 + v2\n    assert result == Vector(4, 6)\ndef test_subtraction(vectors):\n    v1, v2 = vectors",
        "detail": "test_vector",
        "documentation": {}
    },
    {
        "label": "test_addition",
        "kind": 2,
        "importPath": "test_vector",
        "description": "test_vector",
        "peekOfCode": "def test_addition(vectors):\n    v1, v2 = vectors\n    result = v1 + v2\n    assert result == Vector(4, 6)\ndef test_subtraction(vectors):\n    v1, v2 = vectors\n    result = v1 - v2\n    assert result == Vector(-2, -2)\ndef test_multiplication(vectors):\n    v1, _ = vectors",
        "detail": "test_vector",
        "documentation": {}
    },
    {
        "label": "test_subtraction",
        "kind": 2,
        "importPath": "test_vector",
        "description": "test_vector",
        "peekOfCode": "def test_subtraction(vectors):\n    v1, v2 = vectors\n    result = v1 - v2\n    assert result == Vector(-2, -2)\ndef test_multiplication(vectors):\n    v1, _ = vectors\n    result = v1 * 3\n    assert result == Vector(3, 6)\ndef test_equality(vectors):\n    v1, v2 = vectors",
        "detail": "test_vector",
        "documentation": {}
    },
    {
        "label": "test_multiplication",
        "kind": 2,
        "importPath": "test_vector",
        "description": "test_vector",
        "peekOfCode": "def test_multiplication(vectors):\n    v1, _ = vectors\n    result = v1 * 3\n    assert result == Vector(3, 6)\ndef test_equality(vectors):\n    v1, v2 = vectors\n    assert v1 == Vector(1, 2)\n    assert not v1 == v2\ndef test_multiplication_of_vectors(vectors):\n    v1, v2 = vectors",
        "detail": "test_vector",
        "documentation": {}
    },
    {
        "label": "test_equality",
        "kind": 2,
        "importPath": "test_vector",
        "description": "test_vector",
        "peekOfCode": "def test_equality(vectors):\n    v1, v2 = vectors\n    assert v1 == Vector(1, 2)\n    assert not v1 == v2\ndef test_multiplication_of_vectors(vectors):\n    v1, v2 = vectors\n    result = v1 * v2\n    assert result == Vector(3,8)",
        "detail": "test_vector",
        "documentation": {}
    },
    {
        "label": "test_multiplication_of_vectors",
        "kind": 2,
        "importPath": "test_vector",
        "description": "test_vector",
        "peekOfCode": "def test_multiplication_of_vectors(vectors):\n    v1, v2 = vectors\n    result = v1 * v2\n    assert result == Vector(3,8)",
        "detail": "test_vector",
        "documentation": {}
    },
    {
        "label": "Vector",
        "kind": 6,
        "importPath": "vector",
        "description": "vector",
        "peekOfCode": "class Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return f\"Vector({self.x}, {self.y})\"\n    def __eq__(self, other):\n        return self.x == other.x and self.y == other.y \n    def __add__(self, other):\n        if isinstance(other, Vector):",
        "detail": "vector",
        "documentation": {}
    },
    {
        "label": "Vector",
        "kind": 6,
        "importPath": "vector_final",
        "description": "vector_final",
        "peekOfCode": "class Vector:\n    def __init__(self, x, y):\n        self.x = x\n        self.y = y\n    def __repr__(self):\n        return f\"Vector({self.x}, {self.y})\"\n    def __add__(self, other):\n        if isinstance(other, Vector):\n            return Vector(self.x + other.x, self.y + other.y)\n        raise ValueError(\"Unsupported operand type\")",
        "detail": "vector_final",
        "documentation": {}
    }
]